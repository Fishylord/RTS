use std::collections::HashMap;
use std::sync::mpsc::{Receiver, Sender};

use crate::simulation::SimEvent;
use crate::system_monitoring::LogEvent;

/// Recommendations generated by the Flow Analyzer for traffic light adjustments.
#[derive(Debug)]
pub enum Recommendation {
    AdjustGreenTime {
        junction: u32,
        new_green_time: u32,
        timestamp: u64,
    },
}

/// Runs the Traffic Flow Analyzer.
/// It listens to simulation events, detects congestion based on a vehicle count threshold,
/// and sends recommendations to adjust traffic light timings.
pub fn run_flow_analyzer(sim_rx: Receiver<SimEvent>, rec_tx: Sender<Recommendation>, log_tx: Sender<LogEvent>) {
    // Store the latest vehicle counts per junction.
    let mut junction_vehicle_counts: HashMap<u32, u32> = HashMap::new();

    // Process incoming simulation events.
    while let Ok(event) = sim_rx.recv() {
        match event {
            SimEvent::TrafficUpdate { junction, vehicle_count, timestamp } => {
                junction_vehicle_counts.insert(junction, vehicle_count);
                // If vehicle count exceeds the threshold, generate a recommendation.
                if vehicle_count > 20 {
                    let rec = Recommendation::AdjustGreenTime {
                        junction,
                        new_green_time: 40, // For example, set green time to 40 seconds.
                        timestamp,
                    };
                    rec_tx.send(rec).unwrap();

                    // Log that congestion was detected.
                    let log_event = LogEvent {
                        source: "FlowAnalyzer".to_string(),
                        message: format!("Congestion detected at junction {}: {} vehicles", junction, vehicle_count),
                        timestamp,
                    };
                    log_tx.send(log_event).unwrap();
                }
            }
            _ => {
                // Other event types are ignored in this basic analyzer.
            }
        }
    }
}
